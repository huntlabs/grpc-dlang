module helloworld.helloworldrpc;


// Generated by the gRPC dlang plugin.


import helloworld.helloworld;
import std.array;
import grpc;
import google.protobuf;
import hunt.logging;
import core.thread;




class GreeterClient
{
	this(Channel channel)
	{
		_channel = channel;
	}

	HelloReply SayHello( HelloRequest request)
	{
		mixin(CM!(HelloReply , GreeterBase.SERVICE));
	}

	void SayHello( HelloRequest request , void delegate(Status status , HelloReply response) dele)
	{
		mixin(CMA!(HelloReply , GreeterBase.SERVICE));
	}

	HelloReply SayGoodBye( HelloRequest request)
	{
		mixin(CM!(HelloReply , GreeterBase.SERVICE));
	}

	void SayGoodBye( HelloRequest request , void delegate(Status status , HelloReply response) dele)
	{
		mixin(CMA!(HelloReply , GreeterBase.SERVICE));
	}


	private:
	Channel _channel;
}

class GreeterBase: GrpcService
{
	enum SERVICE  = "helloworld.Greeter";
	string getModule()
	{
		return SERVICE;
	}

	Status SayHello(HelloRequest , ref HelloReply){ return Status.OK; }
	Status SayGoodBye(HelloRequest , ref HelloReply){ return Status.OK; }

	Status process(string method , GrpcStream stream, ubyte[] complete)
	{
		switch(method)
		{
			mixin(SM!(HelloRequest , HelloReply , "SayHello"));
			mixin(SM!(HelloRequest , HelloReply , "SayGoodBye"));
			mixin(NONE());
		}
	}
}


