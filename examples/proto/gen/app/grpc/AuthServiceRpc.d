// Generated by the gRPC-dlang plugin.

module app.grpc.AuthServiceRpc;

import app.grpc.AuthService;
import app.grpc.message.Common;
import app.grpc.message.AuthorizeMsg;
import app.grpc.message.LoginMsg;

import grpc;
import google.protobuf;
import hunt.logging;

import core.thread;
import std.array;
import std.traits;


/**
 *
 */
class AuthServiceClient
{
	this(Channel channel)
	{
		_channel = channel;
	}

	LoginMsg authorize(AuthorizeMsg request)
	{
		mixin(CM!(LoginMsg, AuthServiceBase.SERVICE));
	}

	void authorize(AuthorizeMsg request , void delegate(Status status, LoginMsg response) dele)
	{
		mixin(CMA!(LoginMsg, AuthServiceBase.SERVICE));
	}


	private:
	Channel _channel;
}


/**
 *
 */
class AuthServiceBase: GrpcService
{
	enum SERVICE  = "app.grpc.AuthService";
	string getModule()
	{
		return SERVICE;
	}

	Status authorize(AuthorizeMsg req, ref LoginMsg res){ return Status.OK; }

	Status process(string method, GrpcStream stream, ubyte[] complete)
	{
		switch(method)
		{
			mixin(SM!(AuthorizeMsg, LoginMsg , "authorize"));
			mixin(NONE());
		}
	}
}


